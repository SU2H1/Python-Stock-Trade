import tkinter as tk
from tkinter import font, messagebox, simpledialog
import time
import requests
from bs4 import BeautifulSoup
import yfinance as yf
from datetime import datetime, timedelta
import numpy as np
import pandas as pd
from textblob import TextBlob

class MAGIInspiredStockAnalyzer:
    def __init__(self, master):
        self.master = master
        master.title("MAGI Stock Analyzer")
        master.configure(bg='black')
        master.geometry("800x600")

        self.custom_font = font.Font(family="Courier", size=10)
        self.header_font = font.Font(family="Courier", size=12, weight="bold")

        self.create_widgets()
        self.update_time()

    def create_widgets(self):
        # Header
        header_frame = tk.Frame(self.master, bg='black')
        header_frame.pack(fill=tk.X, padx=10, pady=5)

        tk.Label(header_frame, text="Visual Audio System Control / NGE / MAGI HACK Theme", 
                fg='orange', bg='black', font=self.custom_font).pack(side=tk.LEFT)
        tk.Label(header_frame, text="[Re:Work] - ONLINE", 
                fg='orange', bg='black', font=self.custom_font).pack(side=tk.RIGHT)

        # Main content
        main_frame = tk.Frame(self.master, bg='black')
        main_frame.pack(expand=True, fill=tk.BOTH, padx=10, pady=10)

        tk.Label(main_frame, text="Current Operation", fg='orange', bg='black', 
                font=self.header_font).grid(row=0, column=0, columnspan=2, sticky='w', pady=(0, 10))

        # Left side info
        left_frame = tk.Frame(main_frame, bg='black')
        left_frame.grid(row=1, column=0, sticky='nw')

        tk.Label(left_frame, text="CODE : 672", fg='orange', bg='black', 
                font=self.custom_font).pack(anchor='w')
        tk.Label(left_frame, text="FILE: MAGI_SYS", fg='orange', bg='black', 
                font=self.custom_font).pack(anchor='w')
        tk.Label(left_frame, text="EXTENTION: 4096", fg='orange', bg='black', 
                font=self.custom_font).pack(anchor='w')
        tk.Label(left_frame, text="EX_MODE: ERR", fg='orange', bg='black', 
                font=self.custom_font).pack(anchor='w')
        tk.Label(left_frame, text="PRIORITY: S+", fg='orange', bg='black', 
                font=self.custom_font).pack(anchor='w')

        # Right side info
        right_frame = tk.Frame(main_frame, bg='black')
        right_frame.grid(row=1, column=1, sticky='ne')

        tk.Label(right_frame, text="EMERGENCY :STATUS", fg='orange', bg='black', 
                font=self.custom_font).pack(anchor='e')
        
        progress_frame = tk.Frame(right_frame, bg='orange', width=120, height=20)
        progress_frame.pack(anchor='e', pady=5)
        progress = tk.Frame(progress_frame, bg='dark orange', width=40, height=20)
        progress.place(x=0, y=0)

        tk.Label(right_frame, text=":PROGRESS", fg='orange', bg='black', 
                font=self.custom_font).pack(anchor='e')
        tk.Label(right_frame, text="31% :TOTAL", fg='orange', bg='black', 
                font=self.custom_font).pack(anchor='e')
        self.time_label = tk.Label(right_frame, text="00:39 :REMAINING TIME", fg='orange', bg='black', 
                                font=self.custom_font)
        self.time_label.pack(anchor='e')

        # MAGI systems
        magi_frame = tk.Frame(main_frame, bg='black')
        magi_frame.grid(row=2, column=0, columnspan=2, sticky='nsew', pady=20)
        main_frame.grid_rowconfigure(2, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)
        main_frame.grid_columnconfigure(1, weight=1)

        for i, name in enumerate(["CASPER.3", "BALTHAZAR.2", "MELCHIOR.1"]):
            frame = tk.Frame(magi_frame, bg='blue', width=200, height=150)
            frame.grid(row=0, column=i, padx=10)
            frame.grid_propagate(False)
            tk.Label(frame, text=name, fg='black', bg='blue', 
                    font=self.custom_font).place(relx=0.5, rely=0.5, anchor='center')

        tk.Label(magi_frame, text="MAGI-01\nORIGINAL", fg='orange', bg='black', 
                font=self.custom_font).grid(row=1, column=0, columnspan=3, pady=10)

        # Add a button to start analysis
        analyze_button = tk.Button(main_frame, text="Analyze Stock", command=self.start_analysis,
                                fg='orange', bg='black', font=self.custom_font)
        analyze_button.grid(row=3, column=0, columnspan=2, pady=10)

        # Footer
        footer_frame = tk.Frame(self.master, bg='black')
        footer_frame.pack(fill=tk.X, side=tk.BOTTOM, padx=10, pady=5)

        tk.Label(footer_frame, text="Track [Shiro Sagisu - Em20#070720 (MIX)]", 
                fg='orange', bg='black', font=self.custom_font).pack(side=tk.LEFT)
        tk.Label(footer_frame, text="NETWORK: N HACK | System: S ERROR", 
                fg='orange', bg='black', font=self.custom_font).pack(side=tk.RIGHT)

    def update_time(self):
        current_time = time.strftime("%M:%S")
        self.time_label.config(text=f"{current_time} :REMAINING TIME")
        self.master.after(1000, self.update_time)

    def start_analysis(self):
        stock_number = simpledialog.askstring("Input", "Enter the stock exchange number (e.g., 3092 for ZOZO):")
        if not stock_number:
            return

        company_name = self.get_company_name(stock_number)
        if not company_name:
            messagebox.showerror("Error", "Company name could not be found. Please enter a valid stock exchange number.")
            return

        confirmation = messagebox.askyesno("Confirm", f"The company for stock number {stock_number} is {company_name}. Is this correct?")
        if not confirmation:
            return

        purchase_price = simpledialog.askstring("Input", "Enter the price of the stock when you bought it (if not purchased, enter 'n/a'):")
        if purchase_price and purchase_price.lower() != 'n/a':
            try:
                purchase_price = float(purchase_price)
            except ValueError:
                messagebox.showwarning("Warning", "Invalid price entered. Setting purchase price to N/A.")
                purchase_price = None
        else:
            purchase_price = None

        self.analyze_stock(stock_number, company_name, purchase_price)

    def analyze_stock(self, stock_number, company_name, purchase_price):
        try:
            current_stock_price = self.get_current_stock_price(stock_number)
            nikkei_news_data = self.scrape_nikkei_news(stock_number)
            yahoo_finance_news_data = self.scrape_yahoo_finance_news(stock_number)
            
            nikkei_sentiments = [self.analyze_sentiment(news['title']) for news in nikkei_news_data]
            yahoo_finance_sentiments = [self.analyze_sentiment(news['title']) for news in yahoo_finance_news_data]
            
            nikkei_overall_sentiment = self.get_overall_sentiment(nikkei_sentiments)
            yahoo_finance_overall_sentiment = self.get_overall_sentiment(yahoo_finance_sentiments)
            
            if nikkei_sentiments and yahoo_finance_sentiments:
                overall_sentiment_value = (sum(nikkei_sentiments) / len(nikkei_sentiments) + sum(yahoo_finance_sentiments) / len(yahoo_finance_sentiments)) / 2
                overall_sentiment = self.sentiment_to_text(overall_sentiment_value)
            else:
                overall_sentiment = "Insufficient data"
            
            stock_data = self.get_stock_data(stock_number)
            if stock_data:
                matched_pattern = self.identify_pattern(stock_data)
            else:
                matched_pattern = "Unable to retrieve stock data"
            
            if current_stock_price is not None:
                result = f"\nStock Analysis for {company_name} ({stock_number}):\n"
                result += f"Current Price: ¥{current_stock_price:.2f}\n"
                
                if purchase_price is not None:
                    price_difference = current_stock_price - purchase_price
                    price_percentage = (price_difference / purchase_price) * 100
                    result += f"Purchase Price: ¥{purchase_price:.2f}\n"
                    result += f"Price Difference: ¥{price_difference:.2f} ({price_percentage:.2f}%)\n"
                else:
                    result += "Purchase Price: N/A\n"
                    result += "Price Difference: N/A\n"
                
                result += f"\nIdentified 30-Day Pattern: {matched_pattern}\n"
                result += f"\nNikkei Overall Sentiment: {nikkei_overall_sentiment}\n"
                result += f"Yahoo Finance Overall Sentiment: {yahoo_finance_overall_sentiment}\n"
                result += f"Overall Sentiment: {overall_sentiment}\n"
                
                recommendation = self.get_action_recommendation(overall_sentiment, matched_pattern, stock_data, purchase_price)
                result += f"\nRecommended Action: {recommendation}\n"
                
                messagebox.showinfo("Analysis Result", result)
            else:
                messagebox.showerror("Error", "Unable to retrieve current stock price. Please check the stock number and try again.")
        except Exception as e:
            messagebox.showerror("Error", f"An error occurred while processing the stock data: {str(e)}\nPlease check the stock number and try again.")

    def get_company_name(self, stock_number):
        url = f"https://finance.yahoo.co.jp/quote/{stock_number}.T"
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        title_tag = soup.find('title')
        if title_tag:
            title = title_tag.text.strip()
            company_name = title.split('【')[0].strip()
            return company_name
        else:
            return None

    def get_current_stock_price(self, stock_number):
        url = f"https://finance.yahoo.co.jp/quote/{stock_number}.T"
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        
        price_element = soup.select_one('span._3rXWJKZF')
        
        if price_element:
            price_text = price_element.text.strip().replace(',', '')
            try:
                return float(price_text)
            except ValueError:
                return None
        else:
            return None

    def scrape_nikkei_news(self, stock_number):
        url = f"https://www.nikkei.com/nkd/company/news/?scode={stock_number}&ba=1"
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        news_items = soup.find_all('a', href=lambda href: href and "/nkd/company/article/" in href)
        news_data = []
        for item in news_items:
            title = item.text.strip()
            url = "https://www.nikkei.com" + item['href']
            news_data.append({"title": title, "url": url})
        return news_data

    def scrape_yahoo_finance_news(self, stock_number):
        ticker = f"{stock_number}.T"
        url = f"https://finance.yahoo.co.jp/quote/{ticker}/news"
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        news_items = soup.find_all('a', href=lambda href: href and "/news/" in href)
        news_data = []
        for item in news_items:
            title = item.text.strip()
            article_url = item['href']
            if not article_url.startswith('http'):
                article_url = "https://finance.yahoo.co.jp" + article_url
            news_data.append({"title": title, "url": article_url})
        return news_data

    def analyze_sentiment(self, text):
        blob = TextBlob(text)
        # TextBlob sentiment polarity ranges from -1 (very negative) to 1 (very positive)
        # We'll normalize this to a 0-1 scale for consistency with our previous approach
        return (blob.sentiment.polarity + 1) / 2

    def sentiment_to_text(self, score):
        if score > 0.8:
            return "Very Positive"
        elif score > 0.6:
            return "Positive"
        elif score > 0.4:
            return "Neutral"
        elif score > 0.2:
            return "Negative"
        else:
            return "Very Negative"

    def get_stock_data(self, stock_number):
        ticker = f"{stock_number}.T"
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        try:
            df = yf.download(ticker, start=start_date, end=end_date)
            if df.empty:
                print("No data found for the specified stock number.")
                return None
            
            df = df.reset_index()
            df['Date'] = pd.to_datetime(df['Date'])
            stock_data = [(row['Date'], row['Close']) for _, row in df.iterrows()]
            
            # Sort by date (newest first) and return up to 30 days of data
            stock_data.sort(key=lambda x: x[0], reverse=True)
            return stock_data[:30]
        
        except Exception as e:
            print(f"Error retrieving stock data: {e}")
            return None

    def identify_pattern(self, stock_data):
        if stock_data is None or len(stock_data) < 5:
            return "Insufficient data for pattern identification"
        
        prices = [price for _, price in stock_data]
        dates = [date for date, _ in stock_data]
        
        # Reverse the lists to have oldest data first
        prices = prices[::-1]
        dates = dates[::-1]
        
        n = len(prices)
        changes = np.diff(prices)
        
        def is_increasing(data):
            return np.all(np.diff(data) >= 0)
        
        def is_decreasing(data):
            return np.all(np.diff(data) <= 0)
        
        def find_peaks(data, order=3):
            peaks = []
            for i in range(order, len(data) - order):
                if all(data[i] > data[i-j] for j in range(1, order+1)) and all(data[i] > data[i+j] for j in range(1, order+1)):
                    peaks.append(i)
            return np.array(peaks)
        
        def find_troughs(data, order=3):
            troughs = []
            for i in range(order, len(data) - order):
                if all(data[i] < data[i-j] for j in range(1, order+1)) and all(data[i] < data[i+j] for j in range(1, order+1)):
                    troughs.append(i)
            return np.array(troughs)
        
        # Upward and Downward Trends
        if is_increasing(prices):
            return "Upward Trend"
        elif is_decreasing(prices):
            return "Downward Trend"
        
        # V-Shape Recovery and Inverted V-Shape
        if n >= 5:
            if prices[0] > prices[1] > prices[2] < prices[3] < prices[4]:
                return "V-Shape Recovery"
            elif prices[0] < prices[1] < prices[2] > prices[3] > prices[4]:
                return "Inverted V-Shape"
        
        # Double Bottom and Double Top
        peaks = find_peaks(prices)
        troughs = find_troughs(prices)
        
        if len(troughs) >= 2 and troughs[-1] - troughs[-2] >= 5:
            if abs(prices[troughs[-1]] - prices[troughs[-2]]) / prices[troughs[-2]] < 0.03:
                return "Double Bottom"
        
        if len(peaks) >= 2 and peaks[-1] - peaks[-2] >= 5:
            if abs(prices[peaks[-1]] - prices[peaks[-2]]) / prices[peaks[-2]] < 0.03:
                return "Double Top"
        
        # Head and Shoulders
        if len(peaks) >= 3:
            if prices[peaks[1]] > prices[peaks[0]] and prices[peaks[1]] > prices[peaks[2]]:
                if abs(prices[peaks[0]] - prices[peaks[2]]) / prices[peaks[0]] < 0.03:
                    return "Head and Shoulders"
        
        # Triangles and Wedges
        if n >= 15:
            first_half = prices[:n//2]
            second_half = prices[n//2:]
            
            if is_increasing(first_half) and is_decreasing(second_half):
                return "Ascending Triangle"
            elif is_decreasing(first_half) and is_increasing(second_half):
                return "Descending Triangle"
            elif (max(first_half) > max(second_half) and min(first_half) < min(second_half)):
                return "Symmetrical Triangle"
            elif (max(first_half) > max(second_half) and min(first_half) > min(second_half)):
                return "Falling Wedge"
            elif (max(first_half) < max(second_half) and min(first_half) < min(second_half)):
                return "Rising Wedge"
        
        # Pennant and Flag
        if n >= 20:
            if is_increasing(prices[:5]) and np.all(np.abs(np.diff(prices[5:])) < np.mean(np.abs(np.diff(prices[:5])))):
                return "Bullish Pennant"
            elif is_decreasing(prices[:5]) and np.all(np.abs(np.diff(prices[5:])) < np.mean(np.abs(np.diff(prices[:5])))):
                return "Bearish Pennant"
            elif is_increasing(prices[:10]) and is_decreasing(prices[10:]):
                return "Bullish Flag"
            elif is_decreasing(prices[:10]) and is_increasing(prices[10:]):
                return "Bearish Flag"
        
        # Rounding Bottom and Top
        if n >= 15:
            first_third = prices[:n//3]
            last_third = prices[-n//3:]
            if is_decreasing(first_third) and is_increasing(last_third):
                return "Rounding Bottom"
            elif is_increasing(first_third) and is_decreasing(last_third):
                return "Rounding Top"
        
        return "No specific pattern identified"

    def get_suggested_price(self, stock_number):
        ticker = f"{stock_number}.T"
        stock = yf.Ticker(ticker)
        history = stock.history(period="1y")
        
        if history.empty:
            return None, None
        
        current_price = history['Close'][-1]
        avg_price = history['Close'].mean()
        max_price = history['Close'].max()
        min_price = history['Close'].min()
        
        buy_price = (avg_price + min_price) / 2
        sell_price = (avg_price + max_price) / 2
        
        return round(buy_price, 2), round(sell_price, 2)

    # Main function to get all the information
    def get_stock_info(stock_number):
        company_name = get_company_name(stock_number)
        current_stock_price = get_current_stock_price(stock_number)
        
        ja_tokenizer = AutoTokenizer.from_pretrained("daigo/bert-base-japanese-sentiment")
        ja_model = AutoModelForSequenceClassification.from_pretrained("daigo/bert-base-japanese-sentiment")
        en_tokenizer = AutoTokenizer.from_pretrained("finiteautomata/bertweet-base-sentiment-analysis")
        en_model = AutoModelForSequenceClassification.from_pretrained("finiteautomata/bertweet-base-sentiment-analysis")
        
        news_data = scrape_nikkei_news(stock_number) + scrape_yahoo_finance_news(stock_number)
        
        news_sentiments = []
        for news in news_data:
            sentiment_score = analyze_sentiment(news['title'], ja_tokenizer, ja_model, en_tokenizer, en_model)
            sentiment_text = sentiment_to_text(sentiment_score)
            news_sentiments.append({
                'title': news['title'],
                'url': news['url'],
                'sentiment': sentiment_text
            })
        
        stock_data = get_stock_data(stock_number)
        pattern = identify_pattern(stock_data)
        
        buy_price, sell_price = get_suggested_price(stock_number)
        
        return {
            'company_name': company_name,
            'current_stock_price': current_stock_price,
            'news': news_sentiments,
            'pattern': pattern,
            'buy_price': buy_price,
            'sell_price': sell_price
        }

    def get_action_recommendation(self, public_opinion, stock_trend, stock_price_data, purchase_price=None):
        if not stock_price_data:
            return "Insufficient data for recommendation"

        opinion_score = {"Very Positive": 2, "Positive": 1, "Neutral": 0, "Negative": -1, "Very Negative": -2}
        trend_score = {"V-Shape Recovery": 1, "Upward Trend": 1, "Downward Trend": -1, "No specific pattern identified": 0}
        
        total_score = opinion_score.get(public_opinion, 0) + trend_score.get(stock_trend, 0)
        
        prices = [price for _, price in stock_price_data]
        current_price = prices[0]
        avg_price = np.mean(prices)
        std_dev = np.std(prices)
        
        # User owns the stock if purchase_price is not None
        owns_stock = purchase_price is not None
        
        if owns_stock:
            price_change = (current_price - purchase_price) / purchase_price * 100
            
            if total_score > 0:
                if price_change > 0:
                    action = "Hold"
                    explanation = f"Positive outlook. You're currently up {price_change:.2f}%. Consider holding for potential further gains."
                else:
                    action = "Hold"
                    explanation = f"Positive outlook despite current loss. You're currently down {abs(price_change):.2f}%. Consider holding for potential recovery."
            elif total_score < 0:
                if price_change > 0:
                    action = "Consider Selling"
                    explanation = f"Negative outlook despite current gain. You're currently up {price_change:.2f}%. Consider selling to lock in profits."
                else:
                    action = "Consider Selling"
                    explanation = f"Negative outlook. You're currently down {abs(price_change):.2f}%. Consider selling to minimize losses."
            else:
                action = "Hold and Monitor"
                explanation = f"Mixed signals. You're currently {'up' if price_change > 0 else 'down'} {abs(price_change):.2f}%. Monitor the stock closely for changes in sentiment or market trends."
            
            # Add additional context based on significant gains or losses
            if price_change > 20:
                explanation += " However, with significant gains, consider taking partial profits."
            elif price_change < -20:
                explanation += " However, with significant losses, reassess your investment thesis."
        else:
            # Logic for users who don't own the stock
            if total_score > 0:
                target_price = max(current_price * 0.99, avg_price - 0.5 * std_dev)
                action = f"Consider Buying (Target: ¥{target_price:.2f})"
                explanation = "Positive outlook. Consider buying near the suggested target price."
            elif total_score < 0:
                action = "Hold Off"
                explanation = "Negative outlook. It might be better to wait for a more favorable entry point."
            else:
                action = "Monitor"
                explanation = "Mixed signals. Monitor the stock for a clearer trend before making a decision."

        return f"{action}\nExplanation: {explanation}"

    def get_overall_sentiment(self, sentiments):
        if not sentiments:
            return "No data"
        avg_sentiment = sum(sentiments) / len(sentiments)
        return self.sentiment_to_text(avg_sentiment)

if __name__ == "__main__":
    root = tk.Tk()
    analyzer = MAGIInspiredStockAnalyzer(root)
    root.mainloop()
