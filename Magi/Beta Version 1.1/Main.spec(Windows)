# -*- mode: python ; coding: utf-8 -*-
from PyInstaller.utils.hooks import collect_all, copy_metadata
import os
import xgboost

block_cipher = None

datas = []
binaries = []
hiddenimports = []

# Add necessary metadata
packages_to_copy = [
    'transformers', 'tokenizers', 'filelock', 'requests', 'packaging',
    'regex', 'tqdm', 'numpy', 'torch', 'pandas', 'yfinance', 'matplotlib',
    'scikit-learn', 'xgboost', 'ta', 'PyQt6', 'beautifulsoup4', 'langdetect',
    'scipy'
]

for package in packages_to_copy:
    try:
        datas += copy_metadata(package)
    except Exception as e:
        print(f"Failed to copy metadata for {package}: {e}")

# Collect all necessary files for critical packages
for package in ['transformers', 'torch', 'sklearn', 'ta', 'scipy', 'xgboost']:
    datas_t, binaries_t, hiddenimports_t = collect_all(package)
    datas += datas_t
    binaries += binaries_t
    hiddenimports += hiddenimports_t

# Add ipadic data files
import ipadic
ipadic_dir = os.path.dirname(ipadic.__file__)
datas += [(ipadic_dir, 'ipadic')]

# Add XGBoost DLL
xgboost_dir = os.path.dirname(xgboost.__file__)
xgboost_lib = os.path.join(xgboost_dir, 'lib', 'xgboost.dll')
if os.path.exists(xgboost_lib):
    binaries.append((xgboost_lib, '.'))
else:
    print(f"Warning: XGBoost DLL not found at {xgboost_lib}")

a = Analysis(
    ['Main.py'],
    pathex=[],
    binaries=binaries,
    datas=datas,
    hiddenimports=[
        'transformers', 'tqdm', 'regex', 'requests', 'packaging', 'filelock', 
        'numpy', 'tokenizers', 'torch', 'ipadic', 'PyQt6', 'bs4', 'langdetect', 
        'yfinance', 'pandas', 'matplotlib', 'sklearn', 'xgboost', 'ta',
        'datetime', 'json', 're', 'time', 'atexit', 'tempfile',
        'PyQt6.QtWidgets', 'PyQt6.QtGui', 'PyQt6.QtCore', 'PyQt6.sip',
        'matplotlib.backends.backend_qt6agg',
        'sklearn.model_selection', 'sklearn.preprocessing', 'sklearn.ensemble',
        'sklearn.metrics', 'sklearn.neural_network',
        'ta.momentum', 'ta.trend', 'ta.volatility', 'ta.volume',
        'scipy', 'scipy.sparse', 'scipy._lib', 'scipy._lib.array_api_compat',
        'scipy._lib.array_api_compat.numpy', 'scipy._lib.array_api_compat.numpy.fft'
    ] + hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

# Icon path (change this to the correct path of your icon file)
icon_path = r'C:\Users\ka1t0\Documents\Magi\NERV.ico'

# Check if the icon file exists
if os.path.exists(icon_path):
    icon_option = {'icon': icon_path}
    print(f"Using icon: {icon_path}")
else:
    icon_option = {}
    print(f"Warning: Icon file not found at {icon_path}. Building without an icon.")

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='Magi',  # Changed to 'Magi' as per your request
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    **icon_option
)
