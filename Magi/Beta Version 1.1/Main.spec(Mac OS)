# -*- mode: python ; coding: utf-8 -*-
from PyInstaller.utils.hooks import collect_all, copy_metadata
import os
import sys
import xgboost

def collect_package_data(package, include_py_files=False, subdir=None):
    datas = []
    pkg_dir = os.path.dirname(package.__file__)
    if subdir:
        pkg_dir = os.path.join(pkg_dir, subdir)
    for root, dirs, files in os.walk(pkg_dir):
        for file in files:
            if include_py_files or not file.endswith('.py'):
                full_path = os.path.join(root, file)
                rel_path = os.path.relpath(full_path, pkg_dir)
                dest_dir = os.path.dirname(rel_path)
                if not dest_dir:
                    dest_dir = '.'  # Use '.' for files in the package root
                datas.append((full_path, dest_dir))
    return datas

block_cipher = None

datas = []
binaries = []
hiddenimports = []

# Add necessary metadata
packages_to_copy = [
    'transformers', 'tokenizers', 'filelock', 'requests', 'packaging',
    'regex', 'tqdm', 'numpy', 'torch', 'pandas', 'yfinance', 'matplotlib',
    'scikit-learn', 'xgboost', 'ta', 'PyQt6', 'beautifulsoup4', 'langdetect',
    'scipy'
]

for package in packages_to_copy:
    try:
        datas += copy_metadata(package)
    except Exception as e:
        print(f"Failed to copy metadata for {package}: {e}")

# Collect all necessary files for critical packages
for package in ['transformers', 'torch', 'sklearn', 'ta', 'scipy']:
    collect_kwargs = {'include_py_files': True}
    datas_t, binaries_t, hiddenimports_t = collect_all(package, **collect_kwargs)
    datas += datas_t
    binaries += binaries_t
    hiddenimports += hiddenimports_t

# Special handling for XGBoost
datas += collect_package_data(xgboost)
# Explicitly include XGBoost VERSION file
xgboost_dir = os.path.dirname(xgboost.__file__)
datas.append((os.path.join(xgboost_dir, 'VERSION'), 'xgboost'))

# Add ipadic data files
import ipadic
ipadic_dir = os.path.dirname(ipadic.__file__)
datas += [(ipadic_dir, 'ipadic')]

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=binaries,
    datas=datas,
    hiddenimports=[
        'transformers', 'tqdm', 'regex', 'requests', 'packaging', 'filelock', 
        'numpy', 'tokenizers', 'torch', 'ipadic', 'PyQt6', 'bs4', 'langdetect', 
        'yfinance', 'pandas', 'matplotlib', 'sklearn', 'xgboost', 'ta',
        'datetime', 'json', 're', 'time', 'atexit', 'tempfile',
        'PyQt6.QtWidgets', 'PyQt6.QtGui', 'PyQt6.QtCore', 'PyQt6.sip',
        'matplotlib.backends.backend_qt6agg',
        'sklearn.model_selection', 'sklearn.preprocessing', 'sklearn.ensemble',
        'sklearn.metrics', 'sklearn.neural_network',
        'ta.momentum', 'ta.trend', 'ta.volatility', 'ta.volume',
        'scipy', 'scipy.sparse', 'scipy._lib', 'scipy._lib.array_api_compat',
        'scipy._lib.array_api_compat.numpy', 'scipy._lib.array_api_compat.numpy.fft'
    ] + hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=['hypothesis', 'cupy'],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    [],
    exclude_binaries=True,
    name='MAGI Stock Analysis',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)

# Mac-specific configuration
if sys.platform == 'darwin':
    app = BUNDLE(
        exe,
        a.binaries,
        a.zipfiles,
        a.datas,
        name='MAGI Stock Analysis.app',
        icon='/Users/kaitosumishi/Magi/NERV.png',
        bundle_identifier='com.yourcompany.MAGIStockAnalysis',
        info_plist={
            'NSHighResolutionCapable': 'True',
            'NSRequiresAquaSystemAppearance': 'False',
            'CFBundleShortVersionString': '1.0.0',
            'CFBundleVersion': '1',
            'NSPrincipalClass': 'NSApplication',
            'NSAppleScriptEnabled': False,
            'LSBackgroundOnly': False,
            'LSUIElement': False,
        },
    )
else:
    coll = COLLECT(
        exe,
        a.binaries,
        a.zipfiles,
        a.datas,
        strip=False,
        upx=True,
        upx_exclude=[],
        name='MAGI Stock Analysis'
    )
